{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","props","state","hasError","this","setState","children","Component","Scroll","style","overflowY","border","height","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2b0c5900.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css'\r\n\r\nconst Card = ({name , email, id}) =>{\r\n    return(\r\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='robots'/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js'\r\nconst CardList = ({robots}) => {\r\n    return(\r\n        <div>\r\n            {robots.map((user,i)=>{\r\n                return (<Card \r\n                    key={robots[i].id} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}/>)\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n    return(\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--green bg-lightest-blue\" \r\n            type='search' \r\n            placeholder='Search Robots'\r\n            onChange={searchChange}/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React,{ Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(){\r\n        this.setState({ hasError:true })\r\n    }\r\n\r\n    render(){\r\n        if (this.state.hasError){\r\n            return (<h1>Oooopssssss. Something went wrong!</h1>)\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY: 'scroll',border:'2px solid black',height:'80vh'}}>\r\n            {props.children}\r\n        </div> \r\n        );\r\n};\r\n\r\nexport default Scroll;","import { connect } from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport CardList from '../components/CardList.js';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\nimport ErrorBoundary from '../components/ErrorBoundary.js'\r\nimport Scroll from '../components/Scroll.js';\r\nimport {setSearchField, requestRobots} from '../actions';\r\n\r\nconst mapStateToProps = state =>{\r\n    return{\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render(){\r\n            const { searchField, onSearchChange, robots , isPending} = this.props;\r\n            const filteredRobots = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        if (isPending){\r\n            return <h1 className='tc f1'>Loading....</h1>\r\n        } else{\r\n            return (\r\n                <div className='tc'>\r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={onSearchChange}/>\r\n                    <Scroll>\r\n                    <ErrorBoundary>\r\n                    <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n                )\r\n        }\r\n        \r\n }\r\n}  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) =>{\r\n    dispatch ({ type : REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(data=> dispatch({ type: REQUEST_ROBOTS_SUCCESS,payload: data }))\r\n        .catch (error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n    CHANGE_SEARCH_FIELD, \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n    searchField : ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) =>{\r\n    switch(action.type){\r\n    case CHANGE_SEARCH_FIELD:\r\n        return Object.assign({},state,{searchField: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending : false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots =(state=initialStateRobots, action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING : \r\n            return Object.assign({},state, { isPending: true })\r\n        case REQUEST_ROBOTS_SUCCESS :\r\n            return Object.assign({},state, { robots: action.payload, isPending: false })\r\n        case REQUEST_ROBOTS_FAILED :\r\n            return Object.assign({},state, { error: action.payload, isPending: false })\r\n        default: \r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createStore , applyMiddleware, combineReducers } from 'redux';\nimport './index.css';\nimport {createLogger} from 'redux-logger'\nimport App from './containers/App.js'\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\n    const rootReducer = combineReducers({ searchRobots , requestRobots})\n    const logger = createLogger();\n    const store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}